version: 2.1

description: Builds a Haskell application using cabal v2-*.

build-params: &build-params
  executor:
    description: |
      An executor that contains GHC and cabal-install (supporting v2-* commands family.)
      "ghc-8_4_4" and "ghc-8_6_3" are provided, but custom executors can be used (see examples).
    type: executor
    default: ghc-8_4_4
  cache-version:
    description: Cache version. Update this value when you want to start with new build caches.
    type: string
    default: ${CACHE_VERSION:-cache-01}
  cabal-threads:
    description: Number of Cabal threads.
    type: integer
    default: 4
  build-components:
    description: Component names to build ("all" by default)
    type: string
    default: all
  build-components-separately:
    description: Build specified components separately
    type: boolean
    default: false
  test-no-output-timeout:
    description: No output timeout for tests
    type: integer
    default: 600
  cabal-build-extra:
    description: Extra CLI parameters to pass to the "cabal v2-build" command.
    type: string
    default: ""
  cabal-test-extra:
    description: Extra CLI parameters to pass to the "cabal v2-test" command.
    type: string
    default: ""
  build-dependencies-first:
    description: |
      Build project first with "--dependencies-only".
      This is useful for making sure that dependencies are cached even if the priject doesn't compile,
      but can get in a way in some situations.  This parameter is only relevant to `build-with-cci-cache`
      builds and is ignored by `build-with-binary-cache` builds.
    type: boolean
    default: true
  fail-incoherent-builds:
    description: Fail the build when immediate dependencies are incoherent
    type: boolean
    default: true
  run-tests:
    description: Boolean for whether or not to run unit tests
    type: boolean
    default: true
  run-check:
    description: Boolean for whether or not to check if the package has valid cabal file for distribution
    type: boolean
    default: true
  write-result-workspace:
    description: Boolean for whether or not to persist results to a workspace.
    type: boolean
    default: false
  workspace-dir:
    description: Result workspace directory name
    type: string
    default: build
  after-checkout:
    description: Optional steps to run after checkout
    type: steps
    default: []
  before-build:
    description: Optional steps to run after cabal update but before build
    type: steps
    default: []
  after-build:
    description: Optional steps to run after build but before running tests
    type: steps
    default: []
  after-test:
    description: Optional steps to run after executing unit tests
    type: steps
    default: []

  use-private-hackage:
    description: Boolean for whether or not to use a private hackage repo.
    type: boolean
    default: false
  private-hackage-user:
    description: Username on private hackage repo.
    type: string
    default: ${PRIV_HACKAGE_LOGIN}
  private-hackage-password:
    description: Password on private hackage repo.
    type: string
    default: ${PRIV_HACKAGE_PASSWORD}
  private-hackage-domain:
    description: FQDN of private hackage repo.
    type: string
    default: ${PRIV_HACKAGE_DOMAIN}
  private-hackage-keys:
    description: Root keys for private hackage repo.
    type: string
    default: ${PRIV_HACKAGE_KEYS}

jobs:
  build-with-binary-cache:
    description: |
      Build with binary caching using cabal-cache.
      It requires at least 'binary-cache-uri' to be configured.

    executor: << parameters.executor >>
    parameters:
      <<: *build-params
      cabal-cache-tag:
        description: Github tag of the 'cabal-cache' tool to use for binary caching.
        type: string
        default: latest
      binary-cache-uri:
        description: Binary cache URI.  This may be an S3 URI.
        type: string
        default: ${BINARY_CACHE_URI}
      binary-cache-uri-suffix:
        description: |
          Binary cache URI suffix.  This defaults to empty.  When supplied the binary cache URI will be
          extended to include the suffix via simple concatenation.
        type: string
        default: ${BINARY_CACHE_SUFFIX}
      binary-cache-region:
        description: Binary cache region.  This is one of the AWS regions.
        type: string
        default: ${BINARY_CACHE_REGION}
      binary-cache-threads:
        description: Number of threads for uploaded and downloading binary cache.
        type: string
        default: ${BINARY_CACHE_THREADS}
      binary-cache-opts:
        description: AWS log level
        type: string
        default: ${BINARY_CACHE_OPTS}
    steps:
      - perform-build:
          use-private-hackage:      << parameters.use-private-hackage >>
          private-hackage-user:     << parameters.private-hackage-user >>
          private-hackage-password: << parameters.private-hackage-password >>
          private-hackage-domain:   << parameters.private-hackage-domain >>
          private-hackage-keys:     << parameters.private-hackage-keys >>
          after-checkout:           << parameters.after-checkout >>
          write-result-workspace:   << parameters.write-result-workspace >>
          workspace-dir:            << parameters.workspace-dir >>

          build-steps:
            - build-with-binary-cache:
                cache-version:                << parameters.cache-version >>
                cabal-threads:                << parameters.cabal-threads >>
                build-components:             << parameters.build-components >>
                build-components-separately:  << parameters.build-components-separately >>
                test-no-output-timeout:       << parameters.test-no-output-timeout >>
                cabal-build-extra:            << parameters.cabal-build-extra >>
                cabal-test-extra:             << parameters.cabal-test-extra >>
                fail-incoherent-builds:       << parameters.fail-incoherent-builds >>
                run-tests:                    << parameters.run-tests >>
                run-check:                    << parameters.run-check >>
                before-build:                 << parameters.before-build >>
                after-build:                  << parameters.after-build >>
                after-test:                   << parameters.after-test >>
                cabal-cache-tag:              << parameters.cabal-cache-tag >>
                binary-cache-uri:             << parameters.binary-cache-uri >>
                binary-cache-uri-suffix:      << parameters.binary-cache-uri-suffix >>
                binary-cache-region:          << parameters.binary-cache-region >>
                binary-cache-threads:         << parameters.binary-cache-threads >>
                binary-cache-opts:            << parameters.binary-cache-opts >>

  build-with-cci-cache:
    description: Build with CircleCI cache.
    executor: << parameters.executor >>
    parameters:
      <<: *build-params
    steps:
      - perform-build:
          use-private-hackage:      << parameters.use-private-hackage >>
          private-hackage-user:     << parameters.private-hackage-user >>
          private-hackage-password: << parameters.private-hackage-password >>
          private-hackage-domain:   << parameters.private-hackage-domain >>
          private-hackage-keys:     << parameters.private-hackage-keys >>
          after-checkout:           << parameters.after-checkout >>
          write-result-workspace:   << parameters.write-result-workspace >>
          workspace-dir:            << parameters.workspace-dir >>

          build-steps:
            - build-with-cci-cache:
                cache-version:                << parameters.cache-version >>
                cabal-threads:                << parameters.cabal-threads >>
                build-components:             << parameters.build-components >>
                build-components-separately:  << parameters.build-components-separately >>
                test-no-output-timeout:       << parameters.test-no-output-timeout >>
                cabal-build-extra:            << parameters.cabal-build-extra >>
                cabal-test-extra:             << parameters.cabal-test-extra >>
                build-dependencies-first:     << parameters.build-dependencies-first >>
                fail-incoherent-builds:       << parameters.fail-incoherent-builds >>
                run-tests:                    << parameters.run-tests >>
                run-check:                    << parameters.run-check >>
                before-build:                 << parameters.before-build >>
                after-build:                  << parameters.after-build >>
                after-test:                   << parameters.after-test >>

  build:
    description: OBSOLETE. Use 'build-with-cci-cache'. Build with CircleCI cache.
    executor: << parameters.executor >>
    parameters:
      <<: *build-params
    steps:
      - perform-build:
          use-private-hackage:      << parameters.use-private-hackage >>
          private-hackage-user:     << parameters.private-hackage-user >>
          private-hackage-password: << parameters.private-hackage-password >>
          private-hackage-domain:   << parameters.private-hackage-domain >>
          private-hackage-keys:     << parameters.private-hackage-keys >>
          after-checkout:           << parameters.after-checkout >>
          write-result-workspace:   << parameters.write-result-workspace >>
          workspace-dir:            << parameters.workspace-dir >>

          build-steps:
            - build-with-cci-cache:
                cache-version:                << parameters.cache-version >>
                cabal-threads:                << parameters.cabal-threads >>
                build-components:             << parameters.build-components >>
                build-components-separately:  << parameters.build-components-separately >>
                test-no-output-timeout:       << parameters.test-no-output-timeout >>
                cabal-build-extra:            << parameters.cabal-build-extra >>
                cabal-test-extra:             << parameters.cabal-test-extra >>
                build-dependencies-first:     << parameters.build-dependencies-first >>
                fail-incoherent-builds:       << parameters.fail-incoherent-builds >>
                run-tests:                    << parameters.run-tests >>
                run-check:                    << parameters.run-check >>
                before-build:                 << parameters.before-build >>
                after-build:                  << parameters.after-build >>
                after-test:                   << parameters.after-test >>
